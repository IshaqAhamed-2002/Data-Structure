#include <stdio.h>
#include <stdbool.h>

#define SIZE 10 // Size of the hash table

int hashTable[SIZE]; // Hash table array
int numElements = 0; // Number of elements in the hash table

void initializeHashTable() {
    for (int i = 0; i < SIZE; i++) {
        hashTable[i] = -1; // Initialize with -1 to indicate an empty slot
    }
}

int hashFunction(int key) {
    return key % SIZE;
}

void insert(int key) {
    if (numElements == SIZE) {
        printf("Hash table is full\n");
        return;
    }
    
    int index = hashFunction(key);
  
    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE; // Move to the next slot
    }
    
    hashTable[index] = key;
    numElements++;
}

bool search(int key) {
    int index = hashFunction(key);
    
    int initialIndex = index;
    while (hashTable[index] != -1) {
        if (hashTable[index] == key) {
            return true; // Found
        }
        index = (index + 1) % SIZE; // Move to the next slot
        if (index == initialIndex) {
            break; // Reached back to the initial slot, search failed
        }
    }
    
    return false; // Not found
}

void displayHashTable() {
    printf("Hash table contents:\n");
    for (int i = 0; i < SIZE; i++) {
        if (hashTable[i] != -1) {
            printf("Index %d: %d\n", i, hashTable[i]);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    initializeHashTable();
    
    insert(12);
    insert(25);
    insert(37);
    insert(49);
    insert(60);
    insert(72);
    insert(84);
    
    displayHashTable();
    
    int keyToSearch = 37;
    if (search(keyToSearch)) {
        printf("%d found in the hash table\n", keyToSearch);
    } else {
        printf("%d not found in the hash table\n", keyToSearch);
    }
    
    return 0;
}
